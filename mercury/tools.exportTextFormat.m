/**
 * Read the binary files generated by EBEA runs and export them to text format.

 * @author Pedro Mariano
 * @version 1.0 2015/03/30
 */
:- module tools.exportTextFormat.

:- interface.

:- import_module data, data.config.
:- import_module userInterface.
:- import_module io, list.

:- type parameters.


/**
 * Return a default value of {@code parameters}.
 */
:- func default_parameters = tools.exportTextFormat.parameters.

/**
 * dialog_parameters = Parameters
  
 * The logical specification of the user dialog to edit the parameters of
 * the tool that creates gnuplot and text files with population dynamics.
  
 */
:- func dialog_parameters = list(userInterface.dialogItem(tools.exportTextFormat.parameters)).

/**
 * runTool(Config, Parameters, Directory, Feedback, !IO)
  
 * Run the population dynamics tool.
 */
:- pred runTool(data.config.config, tools.exportTextFormat.parameters, string, list(string), io.state, io.state).
:- mode runTool(in, in, in, out, di, uo) is det.


:- implementation.

:- import_module data, data.config, data.util.
:- import_module ebea.
:- import_module ebea.population, ebea.streams.
:- import_module ebea.population.players.
:- import_module ebea.streams.birth, ebea.streams.playerProfile.
:- import_module tools.utils.
:- import_module game.
:- import_module parseable, parseable.iou.
:- import_module printable.
:- import_module util.
:- import_module bool, exception, int, maybe, set, string.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Definition of exported types

:- type parameters --->
	parameters(
		runs                :: list(int) ,
		exportBirths        :: bool ,
		exportPlayerProfile :: bool
	).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Definition of private types

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Implementation of exported predicates and functions


default_parameters = parameters(
	[],
	yes,
	yes
	).

dialog_parameters =
	[
	di(label("runs to process"),          updateListFieldInt(  runs,                 set_runs)),
	di(label("export births"),            updateFieldBool(     exportBirths,         set('exportBirths :='))),
	di(label("export player profiles"),   updateFieldBool(     exportPlayerProfile,  set('exportPlayerProfile :=')))
	].

runTool(Config, Parameters, Directory, Feedback, !IO) :-
	Level = Config^level,
	(	% switch
		Level = detailedBin,
		RunIndexes = tools.utils.checkRuns(Config, Parameters^runs),
		set.fold2(
			exportTextFormat_forRun_s1(Config, Parameters, Directory),
			RunIndexes,
			[], Feedback,
			!IO)
		;
		Level = detailedTxt,
		Feedback = ["Files are already in text format"]
		;
		Level = dynamics,
		Feedback = ["The simulation runs already produced population dynamics"]
		;
		Level = summary,
		Feedback = ["The simulation runs did not produce data to recreate population dynamics"]
	).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Implementation of private predicates and functions




:- pred exportTextFormat_forRun_s1(
	data.config.config                :: in,
	tools.exportTextFormat.parameters :: in,
	string                            :: in,
	int                               :: in,
	list(string) :: in,  list(string) :: out,
	io.state     :: di,  io.state     :: uo
) is det.

exportTextFormat_forRun_s1(
	Config,
	Parameters,
	Directory,
	RunIndex,
	!FeedbackAsList,
	!IO
) :-
	ebea.streams.openInputStreams(Directory, Config^level, yes(string.format("_R%d", [i(RunIndex)])), IMStreams, !IO),
	(	%
		IMStreams = ok(S),
		(if
			S = detailedBin(_, _, _, _, _)
		then
			Streams = S
		else
			throw("Never reached")
		),
		io.format("Run %d\n", [i(RunIndex)], !IO),
		data.util.gameConfig(Config) = data.util.gcex(Game, _, _),
		(if
			Parameters^exportBirths = yes
		then
			ebea.streams.birth.read(Streams, IRAllBirths, !IO),
			exportTextFormat_births_forRun_s1(
				Config,
				Game,
				Parameters,
				Directory,
				RunIndex,
				IRAllBirths,
				!FeedbackAsList,
				!IO)
		 else
			true
		),
		(if
			Parameters^exportPlayerProfile = yes
		then
			exportTextFormat_playerProfiles_forRun_s1(
				Config,
				Game,
				Parameters,
				Directory,
				RunIndex,
				Streams^bisPlayerProfile,
				!FeedbackAsList,
				!IO)
		 else
			true
		),
		ebea.streams.closeInputStreams(Streams, !IO),
		io.print("\r                      \n", !IO)
		;
		IMStreams = error(ErrorMsg),
		list.cons(ErrorMsg, !FeedbackAsList)
	)
	.

:- pred exportTextFormat_forRun_s1(
	data.config.config                :: in,
	G                                 :: in,
	tools.exportTextFormat.parameters :: in,
	string                            :: in,
	int                               :: in,
	list(string) :: in,  list(string) :: out,
	io.state     :: di,  io.state     :: uo
) is det <= (
	asymmetricGame(G, CS),
	parseable(CS),
	printable(CS)
).

exportTextFormat_forRun_s1(
	Config,
	Game,
	Parameters,
	Directory,
	RunIndex,
	!FeedbackAsList,
	!IO
) :-
	ebea.streams.openInputStreams(Directory, Config^level, yes(string.format("_R%d", [i(RunIndex)])), IMStreams, !IO),
	(
		IMStreams = ok(S),
		(if
			S = detailedBin(_, _, _, _, _)
		then
			Streams = S
		else
			throw("Never reached")
		),
		io.format("Run %d\n", [i(RunIndex)], !IO),
		(if
			Parameters^exportBirths = yes
		then
			ebea.streams.birth.read(Streams, IRAllBirths, !IO),
			exportTextFormat_births_forRun_s1(
				Config,
				Game,
				Parameters,
				Directory,
				RunIndex,
				IRAllBirths,
				!FeedbackAsList,
				!IO)
		 else
			true
		),
		(if
			Parameters^exportPlayerProfile = yes
		then
			exportTextFormat_playerProfiles_forRun_s1(
				Config,
				Game,
				Parameters,
				Directory,
				RunIndex,
				Streams^bisPlayerProfile,
				!FeedbackAsList,
				!IO)
		 else
			true
		),
		ebea.streams.closeInputStreams(Streams, !IO),
		io.print("\r                      \n", !IO)
		;
		IMStreams = error(ErrorMsg),
		list.cons(ErrorMsg, !FeedbackAsList)
	)
	.

:- pred exportTextFormat_births_forRun_s1(
	data.config.config                                      :: in,
	G                                                       :: in,
	tools.exportTextFormat.parameters                       :: in,
	string                                                  :: in,
	int                                                     :: in,
	parseable.iou.ioResult(list(iterationBirthRecords(CS))) :: in,
	list(string) :: in,  list(string) :: out,
	io.state     :: di,  io.state     :: uo
) is det <= (
	asymmetricGame(G, CS),
	parseable(CS),
	printable(CS)
).

exportTextFormat_births_forRun_s1(
	_Config,
	_Game,
	_Parameters,
	Directory,
	RunIndex,
	IRAllBirths,
	!FeedbackAsList,
	!IO
) :-
	IRAllBirths = ok(AllBirths),
	tools.utils.openStream(Directory, "", "births", RunIndex, MStream, !FeedbackAsList, !IO),
	(	% switch
		MStream = yes(Stream),
		io.format("# birth records %d\n", [i(list.length(AllBirths))], !IO),
		list.foldl(ebea.streams.birth.listRecords(Stream), AllBirths, !IO),
		io.close_output(Stream, !IO)
	;
		MStream = no
	)
	;
	IRAllBirths = parseError,
	list.cons("parse error while reading births file", !FeedbackAsList)
	;
	IRAllBirths = error(_Msg),
	list.cons("error opening births file", !FeedbackAsList)
	.








:- pred exportTextFormat_playerProfiles_forRun_s1(
	data.config.config                                          :: in,
	G                                                           :: in,
	tools.exportTextFormat.parameters                           :: in,
	string                                                      :: in,
	int                                                         :: in,
	io.binary_input_stream            :: in,
	list(string) :: in,  list(string) :: out,
	io.state     :: di,  io.state     :: uo
) is det <= (
	asymmetricGame(G, CS),
	parseable(CS),
	printable(CS)
).

exportTextFormat_playerProfiles_forRun_s1(
	Config,
	Game,
	Parameters,
	Directory,
	RunIndex,
	BinaryStreamPlayerProfiles,
	!FeedbackAsList,
	!IO
) :-
	tools.utils.openStream(Directory, "", "player-profile", RunIndex, MStream, !FeedbackAsList, !IO),
	(	% switch
		MStream = yes(TextStreamPlayerProfiles),
		exportTextFormat_playerProfiles_forRun_s2(
			Config,
			Game,
			Parameters,
			Directory,
			RunIndex,
			BinaryStreamPlayerProfiles,
			TextStreamPlayerProfiles,
			parseable.iou.cacheInit, CachePlayerProfiles,
			!FeedbackAsList,
			!IO
		),
		io.print(CachePlayerProfiles, !IO),
		io.nl(!IO),
		io.close_output(TextStreamPlayerProfiles, !IO)
	;
		MStream = no
	)
	.

:- pred exportTextFormat_playerProfiles_forRun_s2(
	data.config.config                                          :: in,
	G                                                           :: in,
	tools.exportTextFormat.parameters                           :: in,
	string                                                      :: in,
	int                               :: in,
	io.binary_input_stream            :: in,
	io.output_stream                  :: in,
	parseable.iou.cache   :: in,  parseable.iou.cache   :: out,
	list(string) :: in,  list(string) :: out,
	io.state     :: di,  io.state     :: uo
) is det <= (
	asymmetricGame(G, CS),
	parseable(CS),
	printable(CS)
).

exportTextFormat_playerProfiles_forRun_s2(
	Config,
	Game,
	Parameters,
	Directory,
	RunIndex,
	BinaryStreamPlayerProfiles,
	TextStreamPlayerProfiles,
	!CachePlayerProfiles,
	!FeedbackAsList,
	!IO
) :-
	ebea.streams.playerProfile.read(BinaryStreamPlayerProfiles, Game, !CachePlayerProfiles, RIResult, !IO),
	(	% switch
		RIResult = parseError,
		list.cons("parse error while reading player profiles file", !FeedbackAsList)
	;
		RIResult = ok(IResult),
		(	% switch
			IResult = eof
		;
			IResult = error(Error),
			list.cons(io.error_message(Error), !FeedbackAsList),
			list.cons("IO error while reading player profiles file:", !FeedbackAsList)
		;
			IResult = ok(Result),
			PredPrintKeys =
			(pred(Key::in, !.IOx::di, !:IOx::uo) is det :-
				io.print(TextStreamPlayerProfiles, ' ', !IOx),
				ebea.population.players.printKey(TextStreamPlayerProfiles, Key, !IOx)
			),
			PredPrintRecord =
			(pred(Record::in, !.IOx::di, !:IOx::uo) is det :-
				io.print(TextStreamPlayerProfiles, Result^iteration, !IOx),
				list.foldl(PredPrintKeys, Record, !IOx),
				io.nl(TextStreamPlayerProfiles, !IOx)
			),
			list.foldl(PredPrintRecord, Result^profiles, !IO),
			exportTextFormat_playerProfiles_forRun_s2(
				Config,
				Game,
				Parameters,
				Directory,
				RunIndex,
				BinaryStreamPlayerProfiles,
				TextStreamPlayerProfiles,
				!CachePlayerProfiles,
				!FeedbackAsList,
				!IO
			)
		)
	)
	.







:- func exportBirths(tools.exportTextFormat.parameters) = bool.
:- func 'exportBirths :='(tools.exportTextFormat.parameters, bool) = tools.exportTextFormat.parameters.

:- func exportPlayerProfile(tools.exportTextFormat.parameters) = bool.
:- func 'exportPlayerProfile :='(tools.exportTextFormat.parameters, bool) = tools.exportTextFormat.parameters.

:- func runs(tools.exportTextFormat.parameters) = list(int).
:- func set_runs(tools.exportTextFormat.parameters, list(int)) = userInterface.setResult(tools.exportTextFormat.parameters).

set_runs(P, V) = Result :-
	(if
		list.append(_, [H | T], V),
		list.append(_, [H | _], T)
	then
		Result = error("Duplicate run number")
	else if
		list.member(Run, V),
		Run =< 0
	then
		Result = error("Runs indexes must be positive")
	else
		Result = ok('runs :='(P, V))
	).



:- end_module tools.exportTextFormat.

%%% Local Variables: 
%%% mode: mercury
%%% mode: flyspell-prog
%%% ispell-local-dictionary: "british"
%%% End:
